//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Vida.View.Vacina.RelatoriosCrystal {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DSImpressaoCartaoVacina")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSImpressaoCartaoVacina : global::System.Data.DataSet {
        
        private dadoscartaoDataTable tabledadoscartao;
        
        private vacinasDataTable tablevacinas;
        
        private global::System.Data.DataRelation relationdadoscartao_vacinas;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSImpressaoCartaoVacina() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSImpressaoCartaoVacina(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dadoscartao"] != null)) {
                    base.Tables.Add(new dadoscartaoDataTable(ds.Tables["dadoscartao"]));
                }
                if ((ds.Tables["vacinas"] != null)) {
                    base.Tables.Add(new vacinasDataTable(ds.Tables["vacinas"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dadoscartaoDataTable dadoscartao {
            get {
                return this.tabledadoscartao;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public vacinasDataTable vacinas {
            get {
                return this.tablevacinas;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DSImpressaoCartaoVacina cln = ((DSImpressaoCartaoVacina)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dadoscartao"] != null)) {
                    base.Tables.Add(new dadoscartaoDataTable(ds.Tables["dadoscartao"]));
                }
                if ((ds.Tables["vacinas"] != null)) {
                    base.Tables.Add(new vacinasDataTable(ds.Tables["vacinas"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledadoscartao = ((dadoscartaoDataTable)(base.Tables["dadoscartao"]));
            if ((initTable == true)) {
                if ((this.tabledadoscartao != null)) {
                    this.tabledadoscartao.InitVars();
                }
            }
            this.tablevacinas = ((vacinasDataTable)(base.Tables["vacinas"]));
            if ((initTable == true)) {
                if ((this.tablevacinas != null)) {
                    this.tablevacinas.InitVars();
                }
            }
            this.relationdadoscartao_vacinas = this.Relations["dadoscartao_vacinas"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSImpressaoCartaoVacina";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSImpressaoCartaoVacina.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledadoscartao = new dadoscartaoDataTable();
            base.Tables.Add(this.tabledadoscartao);
            this.tablevacinas = new vacinasDataTable();
            base.Tables.Add(this.tablevacinas);
            this.relationdadoscartao_vacinas = new global::System.Data.DataRelation("dadoscartao_vacinas", new global::System.Data.DataColumn[] {
                        this.tabledadoscartao.co_pacienteColumn}, new global::System.Data.DataColumn[] {
                        this.tablevacinas.co_pacienteColumn}, false);
            this.Relations.Add(this.relationdadoscartao_vacinas);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedadoscartao() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevacinas() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DSImpressaoCartaoVacina ds = new DSImpressaoCartaoVacina();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dadoscartaoRowChangeEventHandler(object sender, dadoscartaoRowChangeEvent e);
        
        public delegate void vacinasRowChangeEventHandler(object sender, vacinasRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dadoscartaoDataTable : global::System.Data.TypedTableBase<dadoscartaoRow> {
            
            private global::System.Data.DataColumn columnimagemtopo;
            
            private global::System.Data.DataColumn columnimagemnome;
            
            private global::System.Data.DataColumn columnimagemcabecalho;
            
            private global::System.Data.DataColumn columnnome;
            
            private global::System.Data.DataColumn columnco_paciente;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dadoscartaoDataTable() {
                this.TableName = "dadoscartao";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dadoscartaoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dadoscartaoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imagemtopoColumn {
                get {
                    return this.columnimagemtopo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imagemnomeColumn {
                get {
                    return this.columnimagemnome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imagemcabecalhoColumn {
                get {
                    return this.columnimagemcabecalho;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nomeColumn {
                get {
                    return this.columnnome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn co_pacienteColumn {
                get {
                    return this.columnco_paciente;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dadoscartaoRow this[int index] {
                get {
                    return ((dadoscartaoRow)(this.Rows[index]));
                }
            }
            
            public event dadoscartaoRowChangeEventHandler dadoscartaoRowChanging;
            
            public event dadoscartaoRowChangeEventHandler dadoscartaoRowChanged;
            
            public event dadoscartaoRowChangeEventHandler dadoscartaoRowDeleting;
            
            public event dadoscartaoRowChangeEventHandler dadoscartaoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddadoscartaoRow(dadoscartaoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dadoscartaoRow AdddadoscartaoRow(byte[] imagemtopo, byte[] imagemnome, byte[] imagemcabecalho, string nome, string co_paciente) {
                dadoscartaoRow rowdadoscartaoRow = ((dadoscartaoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        imagemtopo,
                        imagemnome,
                        imagemcabecalho,
                        nome,
                        co_paciente};
                rowdadoscartaoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdadoscartaoRow);
                return rowdadoscartaoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dadoscartaoRow FindByco_paciente(string co_paciente) {
                return ((dadoscartaoRow)(this.Rows.Find(new object[] {
                            co_paciente})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dadoscartaoDataTable cln = ((dadoscartaoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dadoscartaoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnimagemtopo = base.Columns["imagemtopo"];
                this.columnimagemnome = base.Columns["imagemnome"];
                this.columnimagemcabecalho = base.Columns["imagemcabecalho"];
                this.columnnome = base.Columns["nome"];
                this.columnco_paciente = base.Columns["co_paciente"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnimagemtopo = new global::System.Data.DataColumn("imagemtopo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimagemtopo);
                this.columnimagemnome = new global::System.Data.DataColumn("imagemnome", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimagemnome);
                this.columnimagemcabecalho = new global::System.Data.DataColumn("imagemcabecalho", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimagemcabecalho);
                this.columnnome = new global::System.Data.DataColumn("nome", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnome);
                this.columnco_paciente = new global::System.Data.DataColumn("co_paciente", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnco_paciente);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnco_paciente}, true));
                this.columnco_paciente.AllowDBNull = false;
                this.columnco_paciente.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dadoscartaoRow NewdadoscartaoRow() {
                return ((dadoscartaoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dadoscartaoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dadoscartaoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dadoscartaoRowChanged != null)) {
                    this.dadoscartaoRowChanged(this, new dadoscartaoRowChangeEvent(((dadoscartaoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dadoscartaoRowChanging != null)) {
                    this.dadoscartaoRowChanging(this, new dadoscartaoRowChangeEvent(((dadoscartaoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dadoscartaoRowDeleted != null)) {
                    this.dadoscartaoRowDeleted(this, new dadoscartaoRowChangeEvent(((dadoscartaoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dadoscartaoRowDeleting != null)) {
                    this.dadoscartaoRowDeleting(this, new dadoscartaoRowChangeEvent(((dadoscartaoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedadoscartaoRow(dadoscartaoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSImpressaoCartaoVacina ds = new DSImpressaoCartaoVacina();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dadoscartaoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class vacinasDataTable : global::System.Data.TypedTableBase<vacinasRow> {
            
            private global::System.Data.DataColumn columnvacina;
            
            private global::System.Data.DataColumn columndose;
            
            private global::System.Data.DataColumn columndataaplicacao;
            
            private global::System.Data.DataColumn columnproximadose;
            
            private global::System.Data.DataColumn columnco_paciente;
            
            private global::System.Data.DataColumn columnlote;
            
            private global::System.Data.DataColumn columnestabelecimento;
            
            private global::System.Data.DataColumn columncodigo;
            
            private global::System.Data.DataColumn columnvalidadelote;
            
            private global::System.Data.DataColumn columncnesunidade;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vacinasDataTable() {
                this.TableName = "vacinas";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vacinasDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected vacinasDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vacinaColumn {
                get {
                    return this.columnvacina;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn doseColumn {
                get {
                    return this.columndose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dataaplicacaoColumn {
                get {
                    return this.columndataaplicacao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn proximadoseColumn {
                get {
                    return this.columnproximadose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn co_pacienteColumn {
                get {
                    return this.columnco_paciente;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loteColumn {
                get {
                    return this.columnlote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn estabelecimentoColumn {
                get {
                    return this.columnestabelecimento;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codigoColumn {
                get {
                    return this.columncodigo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn validadeloteColumn {
                get {
                    return this.columnvalidadelote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cnesunidadeColumn {
                get {
                    return this.columncnesunidade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vacinasRow this[int index] {
                get {
                    return ((vacinasRow)(this.Rows[index]));
                }
            }
            
            public event vacinasRowChangeEventHandler vacinasRowChanging;
            
            public event vacinasRowChangeEventHandler vacinasRowChanged;
            
            public event vacinasRowChangeEventHandler vacinasRowDeleting;
            
            public event vacinasRowChangeEventHandler vacinasRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvacinasRow(vacinasRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vacinasRow AddvacinasRow(string vacina, string dose, string dataaplicacao, string proximadose, dadoscartaoRow parentdadoscartaoRowBydadoscartao_vacinas, string lote, string estabelecimento, long codigo, string validadelote, string cnesunidade) {
                vacinasRow rowvacinasRow = ((vacinasRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        vacina,
                        dose,
                        dataaplicacao,
                        proximadose,
                        null,
                        lote,
                        estabelecimento,
                        codigo,
                        validadelote,
                        cnesunidade};
                if ((parentdadoscartaoRowBydadoscartao_vacinas != null)) {
                    columnValuesArray[4] = parentdadoscartaoRowBydadoscartao_vacinas[4];
                }
                rowvacinasRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowvacinasRow);
                return rowvacinasRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                vacinasDataTable cln = ((vacinasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new vacinasDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvacina = base.Columns["vacina"];
                this.columndose = base.Columns["dose"];
                this.columndataaplicacao = base.Columns["dataaplicacao"];
                this.columnproximadose = base.Columns["proximadose"];
                this.columnco_paciente = base.Columns["co_paciente"];
                this.columnlote = base.Columns["lote"];
                this.columnestabelecimento = base.Columns["estabelecimento"];
                this.columncodigo = base.Columns["codigo"];
                this.columnvalidadelote = base.Columns["validadelote"];
                this.columncnesunidade = base.Columns["cnesunidade"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvacina = new global::System.Data.DataColumn("vacina", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvacina);
                this.columndose = new global::System.Data.DataColumn("dose", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndose);
                this.columndataaplicacao = new global::System.Data.DataColumn("dataaplicacao", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndataaplicacao);
                this.columnproximadose = new global::System.Data.DataColumn("proximadose", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproximadose);
                this.columnco_paciente = new global::System.Data.DataColumn("co_paciente", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnco_paciente);
                this.columnlote = new global::System.Data.DataColumn("lote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlote);
                this.columnestabelecimento = new global::System.Data.DataColumn("estabelecimento", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnestabelecimento);
                this.columncodigo = new global::System.Data.DataColumn("codigo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncodigo);
                this.columnvalidadelote = new global::System.Data.DataColumn("validadelote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalidadelote);
                this.columncnesunidade = new global::System.Data.DataColumn("cnesunidade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncnesunidade);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnco_paciente,
                                this.columncodigo}, false));
                this.columnvacina.AllowDBNull = false;
                this.columndose.AllowDBNull = false;
                this.columndataaplicacao.AllowDBNull = false;
                this.columnco_paciente.AllowDBNull = false;
                this.columnlote.AllowDBNull = false;
                this.columnestabelecimento.AllowDBNull = false;
                this.columncodigo.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vacinasRow NewvacinasRow() {
                return ((vacinasRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new vacinasRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(vacinasRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vacinasRowChanged != null)) {
                    this.vacinasRowChanged(this, new vacinasRowChangeEvent(((vacinasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vacinasRowChanging != null)) {
                    this.vacinasRowChanging(this, new vacinasRowChangeEvent(((vacinasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vacinasRowDeleted != null)) {
                    this.vacinasRowDeleted(this, new vacinasRowChangeEvent(((vacinasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vacinasRowDeleting != null)) {
                    this.vacinasRowDeleting(this, new vacinasRowChangeEvent(((vacinasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevacinasRow(vacinasRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSImpressaoCartaoVacina ds = new DSImpressaoCartaoVacina();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "vacinasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dadoscartaoRow : global::System.Data.DataRow {
            
            private dadoscartaoDataTable tabledadoscartao;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dadoscartaoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledadoscartao = ((dadoscartaoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] imagemtopo {
                get {
                    try {
                        return ((byte[])(this[this.tabledadoscartao.imagemtopoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'imagemtopo\' in table \'dadoscartao\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledadoscartao.imagemtopoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] imagemnome {
                get {
                    try {
                        return ((byte[])(this[this.tabledadoscartao.imagemnomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'imagemnome\' in table \'dadoscartao\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledadoscartao.imagemnomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] imagemcabecalho {
                get {
                    try {
                        return ((byte[])(this[this.tabledadoscartao.imagemcabecalhoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'imagemcabecalho\' in table \'dadoscartao\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledadoscartao.imagemcabecalhoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nome {
                get {
                    try {
                        return ((string)(this[this.tabledadoscartao.nomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nome\' in table \'dadoscartao\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledadoscartao.nomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string co_paciente {
                get {
                    return ((string)(this[this.tabledadoscartao.co_pacienteColumn]));
                }
                set {
                    this[this.tabledadoscartao.co_pacienteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimagemtopoNull() {
                return this.IsNull(this.tabledadoscartao.imagemtopoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimagemtopoNull() {
                this[this.tabledadoscartao.imagemtopoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimagemnomeNull() {
                return this.IsNull(this.tabledadoscartao.imagemnomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimagemnomeNull() {
                this[this.tabledadoscartao.imagemnomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimagemcabecalhoNull() {
                return this.IsNull(this.tabledadoscartao.imagemcabecalhoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimagemcabecalhoNull() {
                this[this.tabledadoscartao.imagemcabecalhoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnomeNull() {
                return this.IsNull(this.tabledadoscartao.nomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnomeNull() {
                this[this.tabledadoscartao.nomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vacinasRow[] GetvacinasRows() {
                if ((this.Table.ChildRelations["dadoscartao_vacinas"] == null)) {
                    return new vacinasRow[0];
                }
                else {
                    return ((vacinasRow[])(base.GetChildRows(this.Table.ChildRelations["dadoscartao_vacinas"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class vacinasRow : global::System.Data.DataRow {
            
            private vacinasDataTable tablevacinas;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vacinasRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevacinas = ((vacinasDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vacina {
                get {
                    return ((string)(this[this.tablevacinas.vacinaColumn]));
                }
                set {
                    this[this.tablevacinas.vacinaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dose {
                get {
                    return ((string)(this[this.tablevacinas.doseColumn]));
                }
                set {
                    this[this.tablevacinas.doseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataaplicacao {
                get {
                    return ((string)(this[this.tablevacinas.dataaplicacaoColumn]));
                }
                set {
                    this[this.tablevacinas.dataaplicacaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string proximadose {
                get {
                    try {
                        return ((string)(this[this.tablevacinas.proximadoseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'proximadose\' in table \'vacinas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevacinas.proximadoseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string co_paciente {
                get {
                    return ((string)(this[this.tablevacinas.co_pacienteColumn]));
                }
                set {
                    this[this.tablevacinas.co_pacienteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lote {
                get {
                    return ((string)(this[this.tablevacinas.loteColumn]));
                }
                set {
                    this[this.tablevacinas.loteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string estabelecimento {
                get {
                    return ((string)(this[this.tablevacinas.estabelecimentoColumn]));
                }
                set {
                    this[this.tablevacinas.estabelecimentoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long codigo {
                get {
                    return ((long)(this[this.tablevacinas.codigoColumn]));
                }
                set {
                    this[this.tablevacinas.codigoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string validadelote {
                get {
                    try {
                        return ((string)(this[this.tablevacinas.validadeloteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'validadelote\' in table \'vacinas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevacinas.validadeloteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cnesunidade {
                get {
                    try {
                        return ((string)(this[this.tablevacinas.cnesunidadeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cnesunidade\' in table \'vacinas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevacinas.cnesunidadeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dadoscartaoRow dadoscartaoRow {
                get {
                    return ((dadoscartaoRow)(this.GetParentRow(this.Table.ParentRelations["dadoscartao_vacinas"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dadoscartao_vacinas"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsproximadoseNull() {
                return this.IsNull(this.tablevacinas.proximadoseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetproximadoseNull() {
                this[this.tablevacinas.proximadoseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalidadeloteNull() {
                return this.IsNull(this.tablevacinas.validadeloteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalidadeloteNull() {
                this[this.tablevacinas.validadeloteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscnesunidadeNull() {
                return this.IsNull(this.tablevacinas.cnesunidadeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcnesunidadeNull() {
                this[this.tablevacinas.cnesunidadeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dadoscartaoRowChangeEvent : global::System.EventArgs {
            
            private dadoscartaoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dadoscartaoRowChangeEvent(dadoscartaoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dadoscartaoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class vacinasRowChangeEvent : global::System.EventArgs {
            
            private vacinasRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vacinasRowChangeEvent(vacinasRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vacinasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591